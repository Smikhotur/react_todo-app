{"version":3,"sources":["components/TodoApp/TodoApp.jsx","components/Header/Header.jsx","components/TodoItem/TodoItem.jsx","components/TodoList/TodoList.jsx","components/TodosFilter/TodosFilter.jsx","components/ClearCompleted/ClearCompleted.jsx","components/Footer/Footer.jsx","App.js","index.js"],"names":["TodoApp","setTodos","todos","useState","title","setTitle","onSubmit","event","preventDefault","todo","id","Date","completed","type","className","placeholder","value","onChange","target","Header","TodoItem","saveTodos","setStatus","changeTitle","removeTodo","newTitle","setNewTitle","editTitle","setEditTitle","todoId","setTodoId","handleEdit","handleKeyUp","key","handleBlur","map","editing","onDoubleClick","handleDblClick","checked","onClick","onKeyUp","onBlur","TodoList","completedAll","filterTodos","setChecked","setSaveTodos","useEffect","htmlFor","TodosFilter","to","exact","activeClassName","ClearCompleted","clearAllCompleted","Footer","activeTodos","length","App","localStorage","JSON","parse","getItem","setItem","stringify","filter","completedTodos","pathname","useLocation","prevTodos","check","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dfdab80e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoApp = ({ setTodos, todos }) => {\n  const [title, setTitle] = useState('');\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    const todo = {\n      title,\n      id: +new Date(),\n      completed: false,\n    };\n\n    setTodos(\n      todos ? [todo, ...todos] : [todo],\n    );\n    setTitle('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={title}\n        onChange={({ target }) => setTitle(target.value)}\n      />\n    </form>\n  );\n};\n\nTodoApp.propTypes = {\n  setTodos: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoApp } from '../TodoApp';\n\nexport const Header = ({ setTodos, todos }) => (\n  <header className=\"header\">\n    <h1>todos</h1>\n    <TodoApp\n      setTodos={setTodos}\n      todos={todos}\n    />\n  </header>\n);\n\nHeader.propTypes = {\n  setTodos: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n","import React, { useState } from 'react';\nimport className from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport const TodoItem = ({\n  saveTodos,\n  setStatus,\n  changeTitle,\n  removeTodo,\n}) => {\n  const [newTitle, setNewTitle] = useState();\n  const [editTitle, setEditTitle] = useState(false);\n  const [todoId, setTodoId] = useState(0);\n\n  const handleEdit = ({ target }) => {\n    if (target.value) {\n      setNewTitle(target.value);\n    }\n  };\n\n  const handleDblClick = (event, title, id) => {\n    event.preventDefault();\n    setEditTitle(!editTitle);\n    setNewTitle(title);\n    setTodoId(id);\n  };\n\n  const handleKeyUp = (event) => {\n    const { key } = event;\n\n    switch (key) {\n      case 'Enter':\n        setEditTitle(false);\n        changeTitle(newTitle, todoId);\n        break;\n\n      case 'Escape':\n        setEditTitle(false);\n        changeTitle(newTitle, todoId);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleBlur = () => {\n    setEditTitle(false);\n    changeTitle(newTitle, todoId);\n  };\n\n  return (\n    <>\n      {saveTodos.map(todo => (\n        <li\n          key={todo.id}\n          className={className({\n            completed: todo.completed,\n            editing: todo.id === todoId && editTitle,\n          })}\n          onDoubleClick={event => handleDblClick(event, todo.title, todo.id)}\n        >\n          <div className=\"view\">\n            <input\n              type=\"checkbox\"\n              className=\"toggle\"\n              checked={todo.completed}\n              onChange={() => setStatus(todo.id)}\n            />\n            <label>\n              {todo.title}\n            </label>\n            <button\n              type=\"button\"\n              className=\"destroy\"\n              onClick={() => {\n                removeTodo(todo.id);\n              }}\n            />\n          </div>\n          {todo.id === todoId && editTitle && (\n            <input\n              type=\"text\"\n              className=\"edit\"\n              value={newTitle}\n              onChange={handleEdit}\n              onKeyUp={handleKeyUp}\n              onBlur={handleBlur}\n            />\n          )}\n        </li>\n      ))}\n    </>\n\n  );\n};\n\nTodoItem.propTypes = {\n  saveTodos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })).isRequired,\n  setStatus: PropTypes.func.isRequired,\n  changeTitle: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\nexport const TodoList = ({\n  setStatus,\n  changeTitle,\n  removeTodo,\n  completedAll,\n  filterTodos,\n}) => {\n  const [checked, setChecked] = useState(false);\n  const [saveTodos, setSaveTodos] = useState([]);\n\n  useEffect(() => {\n    setSaveTodos(filterTodos);\n  }, [filterTodos]);\n\n  return (\n    <section className=\"main\">\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        checked={checked}\n        onChange={({ target }) => {\n          setChecked(!checked);\n          completedAll(target.checked);\n        }}\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n      <ul className=\"todo-list\">\n        <TodoItem\n          saveTodos={saveTodos}\n          setStatus={setStatus}\n          changeTitle={changeTitle}\n          removeTodo={removeTodo}\n        />\n      </ul>\n    </section>\n  );\n};\n\nTodoList.propTypes = {\n  setStatus: PropTypes.func.isRequired,\n  changeTitle: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n  completedAll: PropTypes.func.isRequired,\n  filterTodos: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nexport const TodosFilter = () => (\n  <ul className=\"filters\">\n    <li>\n      <NavLink\n        to=\"/all\"\n        exact\n        activeClassName=\"selected\"\n      >\n        All\n      </NavLink>\n    </li>\n\n    <li>\n      <NavLink\n        to=\"/active\"\n        activeClassName=\"selected\"\n      >\n        Active\n      </NavLink>\n    </li>\n\n    <li>\n      <NavLink\n        to=\"/completed\"\n        activeClassName=\"selected\"\n      >\n        Completed\n      </NavLink>\n    </li>\n  </ul>\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const ClearCompleted = ({ clearAllCompleted }) => (\n  <>\n    <button\n      type=\"button\"\n      className=\"clear-completed\"\n      onClick={clearAllCompleted}\n    >\n      Clear completed\n    </button>\n  </>\n);\n\nClearCompleted.propTypes = {\n  clearAllCompleted: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodosFilter } from '../TodosFilter';\nimport { ClearCompleted } from '../ClearCompleted';\n\nexport const Footer = ({\n  activeTodos,\n  clearAllCompleted,\n}) => (\n  <footer className=\"footer\">\n    <span className=\"todo-count\">\n      {`${activeTodos.length} items left`}\n    </span>\n    <TodosFilter />\n    <ClearCompleted clearAllCompleted={clearAllCompleted} />\n  </footer>\n);\n\nFooter.propTypes = {\n  activeTodos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })).isRequired,\n  clearAllCompleted: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router';\nimport { Header } from './components/Header';\nimport { TodoList } from './components/TodoList';\nimport { Footer } from './components/Footer';\n\nexport const App = () => {\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    if (!localStorage.todos) {\n      localStorage.setItem('todos', JSON.stringify([]));\n    } else {\n      setTodos(JSON.parse(localStorage.getItem('todos')));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const setStatus = (todoId) => {\n    setTodos(prevTodos => prevTodos.map((todo) => {\n      if (todoId === todo.id) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  const changeTitle = (title, todoId) => {\n    setTodos(prevTodos => prevTodos.map((todo) => {\n      if (todoId === todo.id) {\n        return {\n          ...todo,\n          title,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  const removeTodo = (todoId) => {\n    setTodos(todos.filter(todo => todo.id !== todoId));\n  };\n\n  const completedAll = (check) => {\n    setTodos(todos.map((todo) => {\n      if (check) {\n        return {\n          ...todo,\n          completed: true,\n        };\n      }\n\n      return {\n        ...todo,\n        completed: false,\n      };\n    }));\n  };\n\n  const activeTodos = todos.filter(todo => !todo.completed);\n  const completedTodos = todos.filter(todo => todo.completed);\n\n  const location = useLocation();\n  const { pathname } = location;\n\n  const filterTodos = () => {\n    switch (pathname) {\n      case '/active':\n        return activeTodos;\n      case '/completed':\n        return completedTodos;\n      default:\n        return todos;\n    }\n  };\n\n  const clearAllCompleted = () => {\n    setTodos(todos.filter(todo => !todo.completed));\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <Header\n        setTodos={setTodos}\n        todos={todos}\n      />\n      {todos\n        && (\n        <>\n          <TodoList\n            todos={todos}\n            filterTodos={filterTodos}\n            setStatus={setStatus}\n            changeTitle={changeTitle}\n            removeTodo={removeTodo}\n            completedAll={completedAll}\n          />\n          <Footer\n            todos={todos}\n            activeTodos={activeTodos}\n            clearAllCompleted={clearAllCompleted}\n          />\n        </>\n        )\n\n      }\n    </section>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}